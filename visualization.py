# visualization.py - Motor de visualizaciones avanzado mejorado
import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import matplotlib.pyplot as plt
import networkx as nx
import pandas as pd
import numpy as np
from datetime import datetime
from typing import Dict, List, Any, Optional
import plotly.figure_factory as ff
from plotly.subplots import make_subplots
import base64
from io import BytesIO

class VisualizationEngine:
    def __init__(self):
        # Paleta de colores mejorada
        self.color_palette = px.colors.qualitative.Bold
        self.sentiment_colors = ['#ff6b6b', '#ffd93d', '#6bcf7f']  # Neg, Neu, Pos
        self.emotion_colors = px.colors.qualitative.Set3
        self.network_colors = px.colors.sequential.Viridis
        
    def display_key_metrics(self, metrics: Dict[str, Any]):
        """Muestra m√©tricas clave en tarjetas visuales mejoradas"""
        st.markdown("### üìä Dashboard de M√©tricas Principales")
        
        # Primera fila - M√©tricas principales
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            self._create_metric_card(
                "üí¨ Mensajes Totales", 
                f"{metrics.get('total_messages', 0):,}",
                "green" if metrics.get('total_messages', 0) > 50 else "orange"
            )
        
        with col2:
            self._create_metric_card(
                "üë• Usuarios √önicos", 
                str(metrics.get('total_users', 0)),
                "green" if metrics.get('total_users', 0) > 2 else "orange"
            )
        
        with col3:
            sentiment = metrics.get('avg_sentiment', 0)
            sentiment_icon = "üòä" if sentiment > 0.1 else "üòê" if sentiment > -0.1 else "üòû"
            sentiment_color = "green" if sentiment > 0.1 else "orange" if sentiment > -0.1 else "red"
            self._create_metric_card(
                f"{sentiment_icon} Sentimiento", 
                f"{sentiment:.3f}",
                sentiment_color
            )
        
        with col4:
            density = metrics.get('message_density', 0)
            self._create_metric_card(
                "üìà Densidad/hora", 
                f"{density:.1f}",
                "green" if density > 2 else "orange"
            )
        
        with col5:
            engagement = metrics.get('engagement_rate', 0)
            self._create_metric_card(
                "üéØ Engagement", 
                f"{engagement:.1f}%",
                "green" if engagement > 50 else "orange"
            )
        
        # Segunda fila - M√©tricas adicionales
        if any(key in metrics for key in ['conversation_health', 'response_rate', 'messages_per_user']):
            col6, col7, col8, col9 = st.columns(4)
            
            with col6:
                health = metrics.get('conversation_health', 'N/A')
                health_color = "green" if health == "Excelente" else "orange" if health == "Buena" else "red"
                self._create_metric_card("‚ù§Ô∏è Salud Conversaci√≥n", health, health_color)
            
            with col7:
                response_rate = metrics.get('response_rate', 0)
                self._create_metric_card("‚ö° Tasa Respuesta", f"{response_rate:.1f}%", 
                                       "green" if response_rate > 50 else "orange")
            
            with col8:
                msgs_per_user = metrics.get('messages_per_user', 0)
                self._create_metric_card("üì® Msgs/Usuario", f"{msgs_per_user:.1f}",
                                       "green" if msgs_per_user > 10 else "orange")
            
            with col9:
                words_per_msg = metrics.get('words_per_message', 0)
                self._create_metric_card("üìù Palabras/Msg", f"{words_per_msg:.1f}",
                                       "green" if words_per_msg > 5 else "orange")
    
    def _create_metric_card(self, title: str, value: str, color: str):
        """Crea una tarjeta de m√©trica visualmente atractiva"""
        color_map = {
            "green": "#10b981",
            "orange": "#f59e0b", 
            "red": "#ef4444"
        }
        
        st.markdown(f"""
        <div style='
            background: linear-gradient(135deg, {color_map.get(color, '#6b7280')}, #1f2937);
            padding: 1.2rem;
            border-radius: 12px;
            color: white;
            text-align: center;
            margin: 0.3rem 0;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            border-left: 4px solid {color_map.get(color, '#6b7280')};
            transition: transform 0.2s ease;
        '>
            <div style='font-size: 0.9rem; opacity: 0.9;'>{title}</div>
            <div style='font-size: 1.8rem; font-weight: bold; margin: 0.5rem 0;'>{value}</div>
        </div>
        """, unsafe_allow_html=True)
    
    def display_sentiment_analysis(self, messages: List[Dict[str, Any]], metrics: Dict[str, Any]):
        """Visualizaci√≥n avanzada de an√°lisis de sentimiento"""
        st.markdown("### üòä An√°lisis de Sentimiento Avanzado")
        
        if not messages:
            st.info("No hay datos para mostrar an√°lisis de sentimiento")
            return
            
        df = pd.DataFrame(messages)
        
        # Crear pesta√±as para diferentes visualizaciones
        tab1, tab2, tab3, tab4 = st.tabs(["üìä Distribuci√≥n", "üìà Evoluci√≥n", "üé≠ Emociones", "üë§ Por Usuario"])
        
        with tab1:
            self._display_sentiment_distribution(df)
        
        with tab2:
            self._display_sentiment_evolution(df)
        
        with tab3:
            self._display_emotion_analysis(messages)
        
        with tab4:
            self._display_user_sentiment_analysis(df, messages)
    
    def _display_sentiment_distribution(self, df: pd.DataFrame):
        """Muestra distribuci√≥n de sentimiento"""
        fig = px.histogram(df, x='sentiment', nbins=25, 
                          title='Distribuci√≥n de Sentimiento en Mensajes',
                          color_discrete_sequence=['#6366f1'],
                          opacity=0.8)
        
        # A√±adir l√≠neas de referencia
        fig.add_vline(x=0.1, line_dash="dash", line_color="green", annotation_text="Positivo")
        fig.add_vline(x=-0.1, line_dash="dash", line_color="red", annotation_text="Negativo")
        
        fig.update_layout(
            xaxis_title='Puntuaci√≥n de Sentimiento', 
            yaxis_title='N√∫mero de Mensajes',
            showlegend=False,
            template='plotly_white'
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Estad√≠sticas r√°pidas
        col1, col2, col3 = st.columns(3)
        with col1:
            positive = len(df[df['sentiment'] > 0.1])
            st.metric("Mensajes Positivos", f"{positive} ({positive/len(df)*100:.1f}%)")
        with col2:
            neutral = len(df[(df['sentiment'] >= -0.1) & (df['sentiment'] <= 0.1)])
            st.metric("Mensajes Neutrales", f"{neutral} ({neutral/len(df)*100:.1f}%)")
        with col3:
            negative = len(df[df['sentiment'] < -0.1])
            st.metric("Mensajes Negativos", f"{negative} ({negative/len(df)*100:.1f}%)")
    
    def _display_sentiment_evolution(self, df: pd.DataFrame):
        """Muestra evoluci√≥n temporal del sentimiento"""
        if len(df) < 10:
            st.info("Se necesitan m√°s mensajes para mostrar la evoluci√≥n temporal")
            return
            
        df_sorted = df.sort_values('timestamp')
        
        # Crear subplots
        fig = make_subplots(rows=2, cols=1, 
                           subplot_titles=('Evoluci√≥n del Sentimiento', 'Volumen de Mensajes por D√≠a'),
                           vertical_spacing=0.1)
        
        # Sentimiento rolling
        window_size = min(20, len(df_sorted) // 10)
        df_sorted['rolling_sentiment'] = df_sorted['sentiment'].rolling(window=window_size, center=True).mean()
        df_sorted['date'] = pd.to_datetime(df_sorted['timestamp']).dt.date
        
        # Gr√°fico de l√≠nea para sentimiento
        fig.add_trace(
            go.Scatter(x=df_sorted['timestamp'], y=df_sorted['rolling_sentiment'],
                      mode='lines', name='Sentimiento (Media M√≥vil)',
                      line=dict(color='#00f2fe', width=3)),
            row=1, col=1
        )
        
        # Gr√°fico de barras para volumen
        daily_volume = df_sorted.groupby('date').size()
        fig.add_trace(
            go.Bar(x=list(daily_volume.index), y=daily_volume.values,
                  name='Mensajes por D√≠a', marker_color='#4facfe'),
            row=2, col=1
        )
        
        fig.update_layout(height=600, showlegend=False, template='plotly_white')
        fig.update_xaxes(title_text="Fecha", row=2, col=1)
        fig.update_yaxes(title_text="Sentimiento", row=1, col=1)
        fig.update_yaxes(title_text="N√∫mero de Mensajes", row=2, col=1)
        
        st.plotly_chart(fig, use_container_width=True)
    
    def _display_emotion_analysis(self, messages: List[Dict[str, Any]]):
        """Muestra an√°lisis de emociones"""
        emotion_data = []
        for msg in messages:
            emotions = msg.get('emotions', {})
            for emotion, score in emotions.items():
                if score > 0.05:  # Umbral m√°s bajo para incluir m√°s emociones
                    emotion_data.append({
                        'user': msg['user'],
                        'emotion': emotion,
                        'score': score
                    })
        
        if not emotion_data:
            st.info("No se detectaron emociones significativas en los mensajes")
            return
            
        df_emotions = pd.DataFrame(emotion_data)
        
        # Heatmap de emociones por usuario
        emotion_pivot = df_emotions.pivot_table(
            index='user', columns='emotion', values='score', aggfunc='mean'
        ).fillna(0)
        
        # Ordenar por frecuencia total de emociones
        emotion_totals = emotion_pivot.sum(axis=0)
        emotion_pivot = emotion_pivot[emotion_totals.sort_values(ascending=False).index]
        
        fig = px.imshow(emotion_pivot, 
                       title='Mapa de Calor de Emociones por Usuario',
                       color_continuous_scale='Viridis',
                       aspect="auto")
        
        fig.update_layout(
            xaxis_title='Emociones',
            yaxis_title='Usuario',
            template='plotly_white'
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Distribuci√≥n general de emociones
        emotion_dist = df_emotions.groupby('emotion')['score'].mean().sort_values(ascending=False)
        fig2 = px.bar(x=emotion_dist.index, y=emotion_dist.values,
                     title='Distribuci√≥n Promedio de Emociones',
                     color=emotion_dist.values,
                     color_continuous_scale='Viridis')
        fig2.update_layout(xaxis_title='Emoci√≥n', yaxis_title='Intensidad Promedio')
        st.plotly_chart(fig2, use_container_width=True)
    
    def _display_user_sentiment_analysis(self, df: pd.DataFrame, messages: List[Dict[str, Any]]):
        """Muestra an√°lisis de sentimiento por usuario"""
        user_sentiment = df.groupby('user')['sentiment'].agg(['mean', 'count', 'std']).reset_index()
        user_sentiment = user_sentiment[user_sentiment['count'] >= 3]  # Filtrar usuarios con pocos mensajes
        
        if len(user_sentiment) == 0:
            st.info("No hay suficientes datos para an√°lisis por usuario")
            return
            
        # Bubble chart: sentimiento vs actividad con tama√±o por consistencia
        fig = px.scatter(user_sentiment, x='count', y='mean', size='count',
                        color='mean', hover_name='user',
                        title='Sentimiento vs Actividad por Usuario',
                        labels={'count': 'N√∫mero de Mensajes', 'mean': 'Sentimiento Promedio'},
                        color_continuous_scale='RdYlGn',
                        size_max=40)
        
        fig.update_layout(template='plotly_white')
        fig.update_traces(marker=dict(sizemode='diameter', line=dict(width=1, color='DarkSlateGrey')))
        st.plotly_chart(fig, use_container_width=True)
    
    def display_user_analysis(self, user_profiles: Dict[str, Dict], metrics: Dict[str, Any]):
        """Visualizaci√≥n mejorada de an√°lisis de usuarios"""
        st.markdown("### üë• An√°lisis de Participaci√≥n de Usuarios")
        
        if not user_profiles:
            st.info("No hay datos de usuarios para analizar")
            return
            
        tab1, tab2, tab3 = st.tabs(["üìà Actividad", "üé≠ Perfiles", "üìä Detalles"])
        
        with tab1:
            self._display_user_activity(user_profiles)
        
        with tab2:
            self._display_user_profiles(user_profiles)
        
        with tab3:
            self._display_user_details(user_profiles)
    
    def _display_user_activity(self, user_profiles: Dict[str, Dict]):
        """Muestra visualizaciones de actividad de usuarios"""
        users = list(user_profiles.keys())
        message_counts = [up['messages_count'] for up in user_profiles.values()]
        avg_sentiments = [up['avg_sentiment'] for up in user_profiles.values()]
        engagement_scores = [up.get('engagement_score', 50) for up in user_profiles.values()]
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Gr√°fico de barras horizontal para mejor legibilidad
            fig = px.bar(x=message_counts, y=users, orientation='h',
                        title='Mensajes por Usuario',
                        color=message_counts,
                        color_continuous_scale='Viridis')
            fig.update_layout(yaxis_title='Usuario', xaxis_title='N√∫mero de Mensajes')
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Scatter plot mejorado
            fig = px.scatter(x=message_counts, y=avg_sentiments, text=users,
                            size=engagement_scores,
                            title='Actividad vs Sentimiento por Usuario',
                            labels={'x': 'N√∫mero de Mensajes', 'y': 'Sentimiento Promedio'},
                            color=engagement_scores,
                            color_continuous_scale='Viridis')
            fig.update_traces(textposition='top center', marker=dict(sizemode='diameter', sizeref=2.*max(engagement_scores)/(40.**2)))
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    def _display_user_profiles(self, user_profiles: Dict[str, Dict]):
        """Muestra perfiles de usuario detallados"""
        st.subheader("Perfiles de Comunicaci√≥n")
        
        for user, profile in user_profiles.items():
            with st.expander(f"üë§ {user} - {profile.get('communicator_type', 'Usuario')}", expanded=False):
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("Mensajes", profile['messages_count'])
                
                with col2:
                    st.metric("Sentimiento", f"{profile['avg_sentiment']:.3f}")
                
                with col3:
                    st.metric("Engagement", f"{profile.get('engagement_score', 0):.1f}%")
                
                with col4:
                    st.metric("Actividad", profile.get('activity_level', 'N/A'))
                
                # Emociones principales
                top_emotions = profile.get('top_emotions', {})
                if top_emotions:
                    st.write("**Emociones principales:**")
                    for emotion, score in list(top_emotions.items())[:3]:
                        st.progress(score, text=f"{emotion}: {score:.2f}")
    
    def _display_user_details(self, user_profiles: Dict[str, Dict]):
        """Muestra tabla detallada de usuarios"""
        user_data = []
        for user, profile in user_profiles.items():
            user_data.append({
                'Usuario': user,
                'Mensajes': profile['messages_count'],
                'Palabras': profile.get('words_count', 0),
                'Sentimiento': f"{profile['avg_sentiment']:.3f}",
                'Tipo': profile.get('communicator_type', 'N/A'),
                'Actividad': profile.get('activity_level', 'N/A'),
                'Engagement': f"{profile.get('engagement_score', 0):.1f}%",
                'Respuesta (min)': profile.get('response_time', 'N/A')
            })
        
        df_users = pd.DataFrame(user_data)
        st.dataframe(df_users, use_container_width=True)
    
    def display_influence_analysis(self, influence_metrics: Dict[str, Dict], user_profiles: Dict[str, Dict]):
        """Visualizaci√≥n mejorada de an√°lisis de influencia"""
        st.markdown("### üëë An√°lisis de Influencia y Liderazgo")
        
        if not influence_metrics:
            st.info("No hay datos de influencia para analizar")
            return
            
        tab1, tab2, tab3 = st.tabs(["üìä M√©tricas", "üèÜ Ranking", "üéØ Roles"])
        
        with tab1:
            self._display_influence_metrics(influence_metrics)
        
        with tab2:
            self._display_influence_ranking(influence_metrics, user_profiles)
        
        with tab3:
            self._display_network_roles(influence_metrics)
    
    def _display_influence_metrics(self, influence_metrics: Dict[str, Dict]):
        """Muestra m√©tricas de influencia en gr√°fico radar"""
        users = list(influence_metrics.keys())[:6]  # M√°ximo 6 usuarios para claridad
        metrics_list = ['degree_centrality', 'betweenness_centrality', 'pagerank', 'activity_factor']
        
        fig = go.Figure()
        
        for user in users:
            metrics_values = [
                influence_metrics[user]['degree_centrality'],
                influence_metrics[user]['betweenness_centrality'] * 2,  # Escalar para mejor visualizaci√≥n
                influence_metrics[user]['pagerank'] * 3,
                influence_metrics[user]['activity_factor'] * 2
            ]
            
            fig.add_trace(go.Scatterpolar(
                r=metrics_values,
                theta=['Centralidad', 'Intermediaci√≥n', 'PageRank', 'Actividad'],
                fill='toself',
                name=user
            ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(visible=True, range=[0, 1])
            ),
            title='Comparaci√≥n de M√©tricas de Influencia',
            template='plotly_white',
            height=500
        )
        st.plotly_chart(fig, use_container_width=True)
    
    def _display_influence_ranking(self, influence_metrics: Dict[str, Dict], user_profiles: Dict[str, Dict]):
        """Muestra ranking de influencia mejorado"""
        sorted_influence = sorted(influence_metrics.items(), 
                                key=lambda x: x[1]['composite_score'], reverse=True)
        
        st.subheader("üèÜ Ranking de Influencia")
        
        for i, (user, metrics) in enumerate(sorted_influence[:10], 1):
            profile = user_profiles.get(user, {})
            
            col1, col2, col3, col4 = st.columns([1, 3, 2, 2])
            
            with col1:
                # Icono de medalla para top 3
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"#{i}"
                st.markdown(f"<h3 style='text-align: center;'>{medal}</h3>", unsafe_allow_html=True)
            
            with col2:
                st.write(f"**{user}**")
                st.write(f"*{metrics['influence_level']}* - {profile.get('communicator_type', 'Usuario')}")
                st.progress(float(metrics['composite_score']))
            
            with col3:
                st.write(f"**Score:** {metrics['composite_score']:.3f}")
                st.write(f"**Mensajes:** {profile.get('messages_count', 0)}")
            
            with col4:
                st.write(f"**Rol:** {metrics.get('network_role', 'N/A')}")
                st.write(f"**Actividad:** {metrics['activity_factor']:.1%}")
            
            st.markdown("---")
    
    def _display_network_roles(self, influence_metrics: Dict[str, Dict]):
        """Muestra distribuci√≥n de roles en la red"""
        roles = {}
        for metrics in influence_metrics.values():
            role = metrics.get('network_role', 'Participante')
            roles[role] = roles.get(role, 0) + 1
        
        if roles:
            fig = px.pie(values=list(roles.values()), names=list(roles.keys()),
                        title='Distribuci√≥n de Roles en la Red',
                        color_discrete_sequence=px.colors.qualitative.Set3)
            st.plotly_chart(fig, use_container_width=True)
    
    def display_network_analysis(self, network_data: Dict[str, Any], user_profiles: Dict[str, Dict], influence_metrics: Dict[str, Dict]):
        """Visualizaci√≥n mejorada de an√°lisis de red"""
        st.markdown("### üåê An√°lisis de Red de Conversaci√≥n")
        
        G = network_data['graph']
        
        if len(G.nodes()) == 0:
            st.warning("No hay suficientes interacciones para visualizar la red")
            return
        
        tab1, tab2 = st.tabs(["üï∏Ô∏è Visualizaci√≥n", "üìà M√©tricas"])
        
        with tab1:
            self._display_network_graph(G, user_profiles, influence_metrics)
        
        with tab2:
            self._display_network_metrics(network_data)
    
    def _display_network_graph(self, G: nx.Graph, user_profiles: Dict[str, Dict], influence_metrics: Dict[str, Dict]):
        """Muestra gr√°fico de red interactivo mejorado"""
        # Usar layout de resorte mejorado
        pos = nx.spring_layout(G, k=2, iterations=100, seed=42)
        
        # Preparar datos de edges
        edge_x = []
        edge_y = []
        edge_weights = []
        
        for edge in G.edges(data=True):
            x0, y0 = pos[edge[0]]
            x1, y1 = pos[edge[1]]
            edge_x.extend([x0, x1, None])
            edge_y.extend([y0, y1, None])
            edge_weights.append(edge[2].get('weight', 1))
        
        # Trace para edges con grosor basado en peso
        edge_trace = go.Scatter(
            x=edge_x, y=edge_y,
            line=dict(width=1, color='#888'),
            hoverinfo='none',
            mode='lines')
        
        # Preparar datos de nodes
        node_x = []
        node_y = []
        node_text = []
        node_size = []
        node_color = []
        node_names = []
        
        for node in G.nodes():
            x, y = pos[node]
            node_x.append(x)
            node_y.append(y)
            node_names.append(node)
            
            influence = influence_metrics.get(node, {}).get('composite_score', 0)
            messages = user_profiles.get(node, {}).get('messages_count', 0)
            role = influence_metrics.get(node, {}).get('network_role', 'Participante')
            
            node_text.append(
                f"<b>{node}</b><br>"
                f"Mensajes: {messages}<br>"
                f"Influencia: {influence:.3f}<br>"
                f"Rol: {role}"
            )
            node_size.append(15 + min(messages / 5, 35))  # Tama√±o m√°s balanceado
            node_color.append(influence)
        
        # Trace para nodes
        node_trace = go.Scatter(
            x=node_x, y=node_y,
            mode='markers+text',
            hoverinfo='text',
            text=node_names,
            textposition="middle center",
            hovertext=node_text,
            marker=dict(
                size=node_size,
                color=node_color,
                colorscale='Viridis',
                showscale=True,
                colorbar=dict(title='Influencia'),
                line=dict(width=2, color='darkblue')
            ),
            textfont=dict(size=10, color='white')
        )
        
        fig = go.Figure(data=[edge_trace, node_trace],
                       layout=go.Layout(
                           title='<b>Red de Conversaci√≥n</b><br><i>Tama√±o: Actividad | Color: Influencia</i>',
                           showlegend=False,
                           hovermode='closest',
                           margin=dict(b=20, l=5, r=5, t=80),
                           xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                           yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                           plot_bgcolor='white',
                           height=600
                       ))
        
        st.plotly_chart(fig, use_container_width=True)
    
    def _display_network_metrics(self, network_data: Dict[str, Any]):
        """Muestra m√©tricas de red en tarjetas"""
        metrics = network_data.get('network_metrics', {})
        
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            self._create_metric_card("Densidad", f"{metrics.get('density', 0):.3f}", 
                                   "green" if metrics.get('density', 0) > 0.3 else "orange")
        
        with col2:
            self._create_metric_card("Agrupamiento", f"{metrics.get('average_clustering', 0):.3f}",
                                   "green" if metrics.get('average_clustering', 0) > 0.5 else "orange")
        
        with col3:
            self._create_metric_card("Componentes", str(metrics.get('connected_components', 0)),
                                   "green" if metrics.get('connected_components', 0) == 1 else "orange")
        
        with col4:
            self._create_metric_card("Grado Promedio", f"{metrics.get('average_degree', 0):.1f}",
                                   "green" if metrics.get('average_degree', 0) > 2 else "orange")
        
        with col5:
            diameter = metrics.get('network_diameter', 'N/A')
            if isinstance(diameter, (int, float)):
                self._create_metric_card("Di√°metro", str(diameter),
                                       "green" if diameter <= 3 else "orange")
            else:
                self._create_metric_card("Di√°metro", str(diameter), "orange")
        
        # Interpretaci√≥n de m√©tricas
        st.info("""
        **Interpretaci√≥n:**
        - **Densidad alta**: Muchas conexiones entre usuarios
        - **Agrupamiento alto**: Formaci√≥n de subgrupos o comunidades  
        - **Un componente**: Todos conectados directamente o indirectamente
        - **Grado alto**: Usuarios muy conectados
        - **Di√°metro bajo**: Informaci√≥n fluye r√°pidamente
        """)
    
    def display_topic_analysis(self, topic_modeling: Dict[str, Any]):
        """Visualizaci√≥n mejorada de an√°lisis de temas"""
        st.markdown("### üéØ Modelado de Temas de Conversaci√≥n")
        
        if not topic_modeling.get('topics'):
            st.info("No se pudieron identificar temas significativos en la conversaci√≥n")
            return
        
        topics = topic_modeling['topics']
        
        # Mostrar temas en tarjetas expandibles
        cols = st.columns(2)
        for i, topic in enumerate(topics):
            with cols[i % 2]:
                with st.expander(f"**Tema {i+1}** - {', '.join(topic['words'][:3])}", expanded=True):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.write("**Palabras clave:**")
                        for word in topic['words'][:8]:
                            st.write(f"‚Ä¢ {word}")
                    
                    with col2:
                        st.metric("Relevancia", f"{topic.get('weight', 0):.3f}")
                        if 'frequency' in topic:
                            st.metric("Frecuencia", topic['frequency'])
        
        # Word cloud simulation mejorada
        st.subheader("üìä Frecuencia de Palabras Clave")
        all_words = []
        for topic in topics:
            all_words.extend(topic['words'][:5])
        
        word_freq = pd.Series(all_words).value_counts()
        
        fig = px.bar(x=word_freq.values, y=word_freq.index, orientation='h',
                    title='Palabras m√°s Frecuentes en los Temas Identificados',
                    color=word_freq.values,
                    color_continuous_scale='Viridis')
        fig.update_layout(xaxis_title='Frecuencia', yaxis_title='Palabra')
        st.plotly_chart(fig, use_container_width=True)
    
    def display_temporal_analysis(self, messages: List[Dict[str, Any]]):
        """Visualizaci√≥n mejorada de an√°lisis temporal"""
        st.markdown("### ‚è∞ An√°lisis Temporal de Actividad")
        
        if not messages:
            st.info("No hay datos para an√°lisis temporal")
            return
            
        df = pd.DataFrame(messages)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        df['hour'] = df['timestamp'].dt.hour
        df['day'] = df['timestamp'].dt.day_name()
        df['date'] = df['timestamp'].dt.date
        
        tab1, tab2, tab3 = st.tabs(["üïí Por Hora", "üìÖ Por D√≠a", "üî• Mapa de Calor"])
        
        with tab1:
            self._display_hourly_activity(df)
        
        with tab2:
            self._display_daily_activity(df)
        
        with tab3:
            self._display_activity_heatmap(df)
    
    def _display_hourly_activity(self, df: pd.DataFrame):
        """Muestra actividad por hora del d√≠a"""
        hourly_activity = df.groupby('hour').size()
        
        fig = px.area(x=hourly_activity.index, y=hourly_activity.values,
                     title='Actividad por Hora del D√≠a',
                     labels={'x': 'Hora del D√≠a', 'y': 'N√∫mero de Mensajes'})
        fig.update_traces(line=dict(color='#4facfe', width=3), fill='tozeroy')
        fig.update_layout(template='plotly_white')
        st.plotly_chart(fig, use_container_width=True)
        
        # Estad√≠sticas de horas pico
        peak_hour = hourly_activity.idxmax()
        peak_activity = hourly_activity.max()
        st.metric("‚è∞ Hora de Mayor Actividad", f"{peak_hour}:00 - {peak_hour+1}:00", 
                 f"{peak_activity} mensajes")
    
    def _display_daily_activity(self, df: pd.DataFrame):
        """Muestra actividad por d√≠a de la semana"""
        day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        day_names_es = ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo']
        
        daily_activity = df.groupby('day').size().reindex(day_order, fill_value=0)
        
        fig = px.bar(x=day_names_es, y=daily_activity.values,
                    title='Actividad por D√≠a de la Semana',
                    color=daily_activity.values,
                    color_continuous_scale='Viridis')
        fig.update_layout(xaxis_title='D√≠a de la Semana', yaxis_title='N√∫mero de Mensajes')
        st.plotly_chart(fig, use_container_width=True)
        
        # D√≠a m√°s activo
        peak_day_idx = daily_activity.values.argmax()
        peak_day = day_names_es[peak_day_idx]
        peak_activity = daily_activity.values[peak_day_idx]
        st.metric("üìÖ D√≠a M√°s Activo", peak_day, f"{peak_activity} mensajes")
    
    def _display_activity_heatmap(self, df: pd.DataFrame):
        """Muestra heatmap de actividad (hora vs d√≠a)"""
        if len(df) < 50:
            st.info("Se necesitan m√°s mensajes para generar el mapa de calor")
            return
            
        day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        day_names_es = ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado', 'Domingo']
        
        df_heatmap = df.groupby(['day', 'hour']).size().unstack(fill_value=0)
        df_heatmap = df_heatmap.reindex(day_order)
        df_heatmap.index = day_names_es
        
        fig = px.imshow(df_heatmap, 
                       title='Mapa de Calor: Actividad por D√≠a y Hora',
                       color_continuous_scale='Viridis',
                       labels=dict(x="Hora del D√≠a", y="D√≠a de la Semana", color="Mensajes"))
        st.plotly_chart(fig, use_container_width=True)
    
    def display_raw_data(self, messages: List[Dict[str, Any]], user_profiles: Dict[str, Dict]):
        """Muestra datos crudos y opciones de exportaci√≥n mejoradas"""
        st.markdown("### üìã Datos y Exportaci√≥n")
        
        tab1, tab2, tab3 = st.tabs(["üì® Mensajes", "üë• Usuarios", "üíæ Exportar"])
        
        with tab1:
            self._display_messages_data(messages)
        
        with tab2:
            self._display_users_data(user_profiles)
        
        with tab3:
            self._display_export_options(messages, user_profiles)
    
    def _display_messages_data(self, messages: List[Dict[str, Any]]):
        """Muestra tabla de mensajes con filtros"""
        st.subheader("Mensajes Analizados")
        
        # Filtros
        col1, col2, col3 = st.columns(3)
        with col1:
            min_sentiment = st.slider("Sentimiento m√≠nimo", -1.0, 1.0, -1.0, 0.1)
        with col2:
            max_sentiment = st.slider("Sentimiento m√°ximo", -1.0, 1.0, 1.0, 0.1)
        with col3:
            users = list(set(msg.get('user', '') for msg in messages))
            selected_user = st.selectbox("Filtrar por usuario", ["Todos"] + users)
        
        # Aplicar filtros
        filtered_messages = messages
        if selected_user != "Todos":
            filtered_messages = [msg for msg in filtered_messages if msg.get('user') == selected_user]
        
        filtered_messages = [msg for msg in filtered_messages 
                           if min_sentiment <= msg.get('sentiment', 0) <= max_sentiment]
        
        # Mostrar tabla
        df_display = pd.DataFrame(filtered_messages[:200])[['timestamp', 'user', 'message', 'sentiment']]  # Limitar para rendimiento
        st.dataframe(df_display, use_container_width=True, height=400)
        
        st.write(f"Mostrando {len(filtered_messages)} de {len(messages)} mensajes")
    
    def _display_users_data(self, user_profiles: Dict[str, Dict]):
        """Muestra tabla detallada de usuarios"""
        st.subheader("Estad√≠sticas de Usuarios")
        
        user_data = []
        for user, profile in user_profiles.items():
            user_data.append({
                'Usuario': user,
                'Mensajes': profile['messages_count'],
                'Palabras': profile.get('words_count', 0),
                'Sentimiento Prom': f"{profile['avg_sentiment']:.3f}",
                'Tipo Comunicador': profile.get('communicator_type', 'N/A'),
                'Nivel Actividad': profile.get('activity_level', 'N/A'),
                'Engagement': f"{profile.get('engagement_score', 0):.1f}%",
                'Tiempo Respuesta (min)': profile.get('response_time', 'N/A')
            })
        
        st.dataframe(pd.DataFrame(user_data), use_container_width=True)
    
    def _display_export_options(self, messages: List[Dict[str, Any]], user_profiles: Dict[str, Dict]):
        """Muestra opciones de exportaci√≥n mejoradas"""
        st.subheader("Opciones de Exportaci√≥n")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üìä CSV Mensajes", use_container_width=True):
                self._export_messages_csv(messages)
        
        with col2:
            if st.button("üë• CSV Usuarios", use_container_width=True):
                self._export_users_csv(user_profiles)
        
        with col3:
            if st.button("üìà Reporte Completo", use_container_width=True):
                self._export_complete_report(messages, user_profiles)
        
        with col4:
            if st.button("üîÑ Nuevo An√°lisis", use_container_width=True):
                st.session_state.analysis_data = None
                st.rerun()
    
    def _export_messages_csv(self, messages: List[Dict[str, Any]]):
        """Exporta mensajes a CSV"""
        df_export = pd.DataFrame(messages)
        csv = df_export.to_csv(index=False, encoding='utf-8')
        st.download_button(
            label="‚¨áÔ∏è Descargar CSV de Mensajes",
            data=csv,
            file_name="whatsapp_mensajes.csv",
            mime="text/csv",
            key="download_messages_csv"
        )
    
    def _export_users_csv(self, user_profiles: Dict[str, Dict]):
        """Exporta estad√≠sticas de usuarios a CSV"""
        user_data = []
        for user, profile in user_profiles.items():
            user_data.append({
                'Usuario': user,
                'Mensajes': profile['messages_count'],
                'Palabras': profile.get('words_count', 0),
                'Sentimiento_Promedio': profile['avg_sentiment'],
                'Tipo_Comunicador': profile.get('communicator_type', ''),
                'Nivel_Actividad': profile.get('activity_level', ''),
                'Engagement': profile.get('engagement_score', 0),
                'Tiempo_Respuesta_Min': profile.get('response_time', 0)
            })
        
        df_users = pd.DataFrame(user_data)
        csv = df_users.to_csv(index=False, encoding='utf-8')
        st.download_button(
            label="‚¨áÔ∏è Descargar CSV de Usuarios",
            data=csv,
            file_name="whatsapp_usuarios.csv",
            mime="text/csv",
            key="download_users_csv"
        )
    
    def _export_complete_report(self, messages: List[Dict[str, Any]], user_profiles: Dict[str, Dict]):
        """Genera y exporta reporte completo"""
        report = self.generate_enhanced_report(messages, user_profiles)
        st.download_button(
            label="‚¨áÔ∏è Descargar Reporte Completo",
            data=report,
            file_name="analisis_whatsapp_completo.txt",
            mime="text/plain",
            key="download_complete_report"
        )
    
    def generate_enhanced_report(self, messages: List[Dict[str, Any]], user_profiles: Dict[str, Dict]) -> str:
        """Genera reporte de an√°lisis mejorado en texto plano"""
        report_lines = []
        report_lines.append("=" * 70)
        report_lines.append("üìä REPORTE COMPLETO DE AN√ÅLISIS DE WHATSAPP")
        report_lines.append("=" * 70)
        report_lines.append(f"Fecha de generaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report_lines.append(f"Total mensajes analizados: {len(messages):,}")
        report_lines.append(f"Usuarios √∫nicos: {len(user_profiles)}")
        report_lines.append("")
        
        # Resumen de m√©tricas generales
        if messages:
            avg_sentiment = np.mean([msg.get('sentiment', 0) for msg in messages])
            total_words = sum([msg.get('words_count', 0) for msg in messages])
            report_lines.append("üìà M√âTRICAS GENERALES:")
            report_lines.append("-" * 50)
            report_lines.append(f"Sentimiento promedio: {avg_sentiment:.3f}")
            report_lines.append(f"Palabras totales: {total_words:,}")
            report_lines.append(f"Palabras por mensaje: {total_words/len(messages):.1f}")
            report_lines.append("")
        
        # Resumen de usuarios
        report_lines.append("üë• RESUMEN DE USUARIOS:")
        report_lines.append("-" * 50)
        
        for user, profile in sorted(user_profiles.items(), 
                                  key=lambda x: x[1]['messages_count'], reverse=True):
            report_lines.append(
                f"‚Ä¢ {user}: "
                f"{profile['messages_count']} mensajes | "
                f"{profile.get('words_count', 0)} palabras | "
                f"Sentimiento: {profile['avg_sentiment']:.3f} | "
                f"Tipo: {profile.get('communicator_type', 'N/A')}"
            )
        
        report_lines.append("")
        report_lines.append("üéØ RECOMENDACIONES:")
        report_lines.append("-" * 50)
        
        # Recomendaciones basadas en el an√°lisis
        if len(user_profiles) > 5:
            report_lines.append("‚Ä¢ Grupo muy activo con buena diversidad de participantes")
        elif len(user_profiles) > 2:
            report_lines.append("‚Ä¢ Grupo de tama√±o moderado, buena para conversaciones enfocadas")
        else:
            report_lines.append("‚Ä¢ Conversaci√≥n uno a uno, muy personalizada")
        
        avg_sent = np.mean([p['avg_sentiment'] for p in user_profiles.values()])
        if avg_sent > 0.2:
            report_lines.append("‚Ä¢ Ambiente muy positivo en la conversaci√≥n")
        elif avg_sent > 0:
            report_lines.append("‚Ä¢ Ambiente generalmente positivo")
        else:
            report_lines.append("‚Ä¢ Se detect√≥ sentimiento negativo, considerar intervenci√≥n")
        
        return "\n".join(report_lines)

    # M√©todo original mantenido para compatibilidad
    def generate_report(self, messages: List[Dict[str, Any]], user_profiles: Dict[str, Dict]) -> str:
        return self.generate_enhanced_report(messages, user_profiles)